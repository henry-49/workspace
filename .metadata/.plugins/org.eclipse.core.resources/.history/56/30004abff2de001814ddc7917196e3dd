package labs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class lab3 {

	public static void main(String[] args) {
		// read file of passwords
		String filename = "C:\\Users\\henry\\workspace\\JavaTraning\\Files\\Passwords.txt";
		String[] passwords = new String[13];
		
		File file = new File(filename);
		
		FileReader fr;
		try {
			fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			for(int i=0; i < passwords.length; i++) {
				passwords[i] = br.readLine();
			}
			br.close();
		} catch (FileNotFoundException e) {
			System.out.println("Error: can not open file");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("Error: can not read file");
			e.printStackTrace();
		}
		
		// test against our criteria
		for(String password: passwords) {
			System.out.println("******\n "+password);
			boolean hasNumber = false;
			boolean hasLetter = false;
			boolean hasSpecialChar = false;
			boolean hasInvalidChar = true;
			
			for(int n=0; n<password.length(); n++) {
				
				// condition 1. contains a number
				if("0123456789".contains(password.substring(n, n + 1))) {
					hasNumber = true;
					//System.out.println("Position " + n + " contains a number");
				
					// condition 2. contains a latter
				}else if("abcdefghijklmnopqrstuvwxyz".contains(password.substring(n, n + 1).toLowerCase())) {
					 hasLetter = true;
					//System.out.println("Position " + n + " contains a letter");
					
					// condition 1. contains special character !@#
				}else if("/[+=!@#$%&^*()_-]".contains(password.substring(n, n + 1))) {
					hasSpecialChar = true;
					//System.out.println("Position " + n + " contains a special charater");
				}else {
					try {
						throw new InvalidCharException(password.substring(n, n + 1));
					} catch (InvalidCharException e) {
						e.toString();
						break;
					}
					//hasInvalidChar = false;
					//System.out.println("Position " + n + " contains an invalid character");
				}
						
			}
			// Test & Exception Handling
		try {
				if(!hasNumber) {
					throw new NumberCriteriaException(password);
					//System.out.println("Missing Criteria");
				}else if(!hasLetter) {
					throw new LetterCriteriaException(password);
				}else if(!hasSpecialChar) {
					throw new SpecialCharCriteriaException(password);
				}

			}catch(NumberCriteriaException | LetterCriteriaException | SpecialCharCriteriaException e) {
				System.out.println("Invalid password");
				System.out.println( e.toString());
			}
			
		}

	}

}

class InvalidCharException extends Exception {
	
	String ch;
	public InvalidCharException (String ch){
		this.ch = ch;
	}
	
	public String toString() {
		return "InvalidCharException: "+ch;
	}
}

class NumberCriteriaException extends Exception {
	
	String password;
	public NumberCriteriaException (String password){
		this.password = password;
	}
	
	public String toString() {
		return "NumberCriteriaException	: "+password;
	}
}

class LetterCriteriaException extends Exception {
	
	String password;
	public LetterCriteriaException (String password){
		this.password = password;
	}
	
	public String toString() {
		return "LetterCriteriaException: "+password;
	}
}

class SpecialCharCriteriaException extends Exception {
	
	String password;
	public SpecialCharCriteriaException (String password){
		this.password = password;
	}
	
	public String toString() {
		return "SpecialCharCriteriaException: "+password;
	}
}
